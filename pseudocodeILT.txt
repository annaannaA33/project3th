Class Structure:

1 Question:

Properties: ID, question text, answer, type (quiz or free-form)
Methods: getters and setters for properties


2 QuestionManager:

Properties: List of Question objects
Methods:
Add question
View statistics
Disable/enable question
Get random question for practice
Generate random test

3 FileManager:

Methods:
Read from file (questions, disabled/enabled status)
Write to file (questions, disabled/enabled status)
PracticeMode:

Properties: QuestionManager instance
Methods:

4 Start practice
Track and adjust question probabilities
TestMode:

Properties: QuestionManager instance
Methods:

5 Start test
Record and save test scores
Profile:

Properties: Profile name, statistics (correctly answered questions)
Methods:
Adjust question probabilities based on statistics


Implementation Steps:
User Interface:

Use a simple command-line interface (for now).
Display options for different modes.

Adding Questions:

1 Prompt user for question type, text, and answers.
Save questions to a file using FileManager.

2 Statistics Viewing:

Display question statistics using QuestionManager.

3 Disable/Enable Questions:

Prompt user for question ID to disable/enable.
Update status in FileManager.

4 Practice Mode:

Implement weighted random selection for questions.
Track and adjust probabilities based on correctness.

5 Test Mode:

Prompt user for the number of questions.
Randomly select questions without repetition.
Record and save test scores.

6 Profile Select (Bonus):

Allow users to select a profile.
Track individual statistics for each profile.

7 File Management:

Implement FileManager for reading and writing questions, statuses, and scores.

8 Unit Tests:

Write tests for key functionalities, e.g., adding questions, disabling/enabling questions, practice mode, and test mode.

Code Cleanup:

Ensure code readability and adherence to PEP 8 standards.
Usability Testing:

Conduct usability testing to ensure the program is user-friendly.

Additional:

Implement a "full reset" option.
Improve user interface for better user experience.

Unit Tests:
Test adding questions to ensure they are stored correctly.
Test disabling/enabling questions and verify the status change.
Test practice mode to check question selection and probability adjustments.
GitHub Repository:
Make sure to organize your code into meaningful folders and include a README file explaining how to use the program and any additional information. Upload your project, including output files, to the GitHub repository.

